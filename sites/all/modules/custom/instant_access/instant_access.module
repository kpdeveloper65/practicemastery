<?php

@require_once(drupal_get_path('module', 'campaignmonitor') .'/lib/CMBase.php');

define("API_KEY", '1612dc92e480ca7a27ed67c07764f954');
define("USERS_LIST_ID", '83a88bc73bab0dee916918db6a070037');
define("EXPERTS_LIST_ID", '19630bb9bd3c8a0fc4fd870178487830');


/**
 * Implementation of hook_nodeapi().
 */
function instant_access_nodeapi(&$node, $op, $teaser, $page) {

  switch ($op) {
    case 'insert':
    // When a users profile is created add him to the subscribe them to web Users list at Campaign Monitor
    if ($node->type == 'registration'){

      $person = db_fetch_object(db_query("SELECT u.mail FROM {users} u WHERE u.uid = %d ",  $node->uid ));

      $email = $person->mail;
      $name = $node->field_fname[0]['value'];

      // Send details to Campaign Monitor
      instant_access_add_subscriber(API_KEY, USERS_LIST_ID, $name, $email, $show_errors = FALSE);
    }
    break;
  }
}


/**
 * Implementation of hook_block().
 *
 * This hook both declares to Drupal what blocks are provided by the module, and
 * generates the contents of the blocks themselves.
 */
function instant_access_block($op = 'list', $delta = '', $edit = array()) {
  // The $op parameter determines what piece of information is being requested.
  switch ($op) {
    case 'list':
      $blocks['experts'] = array(
        'info' => t('Subscribe to Experts Masterclass and see webinar'),
      );
      // A block can provide default settings. In this case we'll enable the
      // block and make it visible only on the 'node/*' pages.
      /*$blocks['empty'] = array(
        'info'       => t('Example: empty block'),
        'status'     => TRUE,
        'weight'     => 0,
        'visibility' => 1,
        'pages'      => 'node/*',
      );*/
      return $blocks;



    case 'view':
      switch ($delta) {
        case 'experts':
          $block['subject'] = t('FREE DETAILED TRAINING VIDEOS');
          $block['content'] = _instant_access_blockcontents(1);
          break;

      }
      return $block;
  }
}

/**
 * A block content function.
 */
function _instant_access_blockcontents($delta) {
  switch ($delta) {
    case 1:
      $output = '<p>on how to become an expert in your field and earn three times as much as other practitioners even if they know more than you do!</p>';
      $output .= drupal_get_form('instant_access_experts_form');
      return $output;


  }
}


/**
 *
 */
function instant_access_experts_form( &$form_state) {

  $form['name'] = array(
    '#type' => 'textfield',
    '#title' => t('Name'),
    '#size' => 20,
    '#maxlength' => 64,
  );

  $form['email'] = array(
    '#type' => 'textfield',
    '#title' => t('Email'),
    '#size' => 20,
    '#maxlength' => 64,
  );
  //$form['hidden'] = array('#type' => 'value', '#value' => 'is_it_here');
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Get Instant Access'));

  return $form;
}


/**
 * Validate form
 */
function instant_access_experts_form_validate($form, &$form_state) {
    watchdog('instant_access', 'validate');

  if ($form_state['values']['name'] == '') {
    form_set_error('', t('Please enter your name.'));
  }

  if ($form_state['values']['email'] == '') {
    form_set_error('', t('Please enter your email.'));
  } elseif (!instant_access_check_email_address($form_state['values']['email'])) {
          form_set_error('', t('Invalid email address %mail.', array('%mail' => $form_state['values']['email'])));
        }
}



/**
 * Submit form
 */
function instant_access_experts_form_submit($form, &$form_state) {
  //watchdog('instant_access', 'submitted');

  instant_access_add_subscriber(API_KEY, EXPERTS_LIST_ID, $form_state['values']['name'], $form_state['values']['email'], $show_errors = FALSE);


  drupal_goto('expert-masterclass-training');
}


/**
 * Email verification
 */
function instant_access_check_email_address($email) {
  // First, we check that there's one @ symbol,
  // and that the lengths are right.
  if (!ereg("^[^@]{1,64}@[^@]{1,255}$", $email)) {
    // Email invalid because wrong number of characters
    // in one section or wrong number of @ symbols.
    return false;
  }
  // Split it into sections to make life easier
  $email_array = explode("@", $email);
  $local_array = explode(".", $email_array[0]);
  for ($i = 0; $i < sizeof($local_array); $i++) {
    if
(!ereg("^(([A-Za-z0-9!#$%&'*+/=?^_`{|}~-][A-Za-z0-9!#$%&
?'*+/=?^_`{|}~\.-]{0,63})|(\"[^(\\|\")]{0,62}\"))$",
$local_array[$i])) {
      return false;
    }
  }
  // Check if domain is IP. If not,
  // it should be valid domain name
  if (!ereg("^\[?[0-9\.]+\]?$", $email_array[1])) {
    $domain_array = explode(".", $email_array[1]);
    if (sizeof($domain_array) < 2) {
        return false; // Not enough parts to domain
    }
    for ($i = 0; $i < sizeof($domain_array); $i++) {
      if
(!ereg("^(([A-Za-z0-9][A-Za-z0-9-]{0,61}[A-Za-z0-9])|
?([A-Za-z0-9]+))$",
$domain_array[$i])) {
        return false;
      }
    }
  }
  return true;
}

/**
 *
 */
function instant_access_add_subscriber($api_key, $list_id, $name, $email, $show_errors = FALSE) {
  $cm = new CampaignMonitor($api_key, $client_id, $campaign_id, $list_id );

  $result = $cm->subscriberAddAndResubscribe($email, $name);
  if ($result['anyType']['Code'] != 0) {
    watchdog('campaignmonitor', 'Add and Resubscribe: Code - %code, Message - %message',
            array('%code' => $result['anyType']['Code'], '%message' => $result['anyType']['Message']), WATCHDOG_ERROR);
    //drupal_set_message(t("There was an error joining to newsletter."), 'error');
  }
  else {
    //drupal_set_message(t("You have successfully been added."), 'status');
  }
}