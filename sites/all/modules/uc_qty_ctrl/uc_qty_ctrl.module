<?php

/**
 * @file
 * Allows control over the quantity that can be added to a cart for each product class.
 * 
 *
 * Created by David Egan (davegan on Drupal.org)
 */


/**
 * Implementation of hook_menu().
 */
function uc_qty_ctrl_menu() { //$may_cache) {
  $items = array();

	$items['admin/store/settings/qty_ctrl'] = array(
		/*'path' => 'admin/store/settings/qty_ctrl',*/
		'title' => t('Quantity Control settings'),
		'description' => t('View the cart quantity control settings.'),
		'page callback' => 'drupal_get_form',
		'page arguments' => array('uc_qty_ctrl_settings'),
		'access arguments' => array('administer store'),/*user_access('administer store'),*/
		'type' => MENU_NORMAL_ITEM
	);
	
  return $items;
}


/**
 * Main settings form.
 */
function uc_qty_ctrl_settings() {
  
  //default class 'product' isn't in product_classes table
  $form['uc_qty_ctrl_max_product'] = array(
    '#type' => 'textfield',
    '#title' => t('Maximum Quantity in Cart for !class_name', array('!class_name' => 'Product')),
    '#description' => t('Enter 0 for unlimited'),
    '#default_value' => variable_get('uc_qty_ctrl_max_product', 0),
    '#size' => 1,
    '#maxlength' => 2
  );
  
  $result = db_query("SELECT * FROM {uc_product_classes}");
  
  while ($class = db_fetch_object($result)) {
    $form['uc_qty_ctrl_max_' . $class->pcid] = array(
      '#type' => 'textfield',
      '#title' => t('Maximum Quantity in Cart for !class_name', array('!class_name' => $class->name)),
      '#description' => t('Enter 0 for unlimited'),
      '#default_value' => variable_get('uc_qty_ctrl_max_' . $class->pcid, 0),
      '#size' => 1,
      '#maxlength' => 2
    );
  }
  
  return system_settings_form($form);
}

/**
 * Implementation of hook_add_to_cart().
 */
function uc_qty_ctrl_add_to_cart($nid, $qty, $data) {
 
  $product_node = node_load($nid);
  $max_qty = variable_get('uc_qty_ctrl_max_' . $product_node->type, 0);
  
  //if unlimited quantity allowed, return zero
  if ($max_qty == 0) 
  	return array(0 => array('success' => TRUE));
 
  //see if too many are being added at one time
  if ($qty > $max_qty) {
    //$message = t('Sorry, you can have a maximum of !max_items of type !product_name in your shopping cart.', 
    //              array('!max_items' => format_plural($max_qty, '1 item', '@count items'), '!product_name' => $product_node->title));
    $message = t('Sorry, this item has already been added to your cart.');
  	$result[] = array(
      'success' => FALSE,
      'message' => $message,
    );
    return $result;
  } 


//start code by chenna

//see if user already added to its account
	global $user;
	$purchase_sql="SELECT c.`nid` as nid FROM `uc_orders` as a,`uc_products` as b,`uc_order_products` as c,`uc_roles_products` as d 
		      where a.uid='".$user->uid."' and a.order_id=c.order_id and c.nid=d.nid
		      and (a.order_status='completed' or  a.order_status='pending') group by a.order_id";
	$purchase_query=db_query($purchase_sql);
	while($purchase_node=db_fetch_object($purchase_query)){
		if($purchase_node->nid ==$nid){			
			$message = t('Sorry, You have already purchased this product.');
			$result[] = array('success' => FALSE,'message' => $message);
			return $result;
		}
	 }


//check for certificate course duration and restricting to purchase diploma course if certificate course was not completed.
	$query="SELECT `rid` FROM `users_roles` WHERE `uid`='".$user->uid."'";
	$query=db_query($query);
	$query=db_fetch_object($query);
	$role_sql="SELECT `rid` FROM `uc_roles_products` WHERE `nid`='".$nid."' ";
	$role_res=db_query($role_sql);
	$prod_role=db_fetch_object($role_res); 
	if($query->rid==10 && $prod_role->rid==5){
		$node_sql="SELECT c.`nid` as nid,a.`created` as created 
		FROM `uc_orders` AS a, `uc_products` AS b, `uc_order_products` AS c, `uc_roles_products` AS d
		WHERE a.`uid` = '".$user->uid."'
		AND a.`order_id` = c.`order_id`
		AND c.`nid` = d.`nid`
		AND a.`order_status` = 'completed'
		GROUP BY a.`order_id`";
		$node_query=db_query($node_sql);
		while($node_id=db_fetch_object($node_query)){
			$duration_sql="SELECT `duration` FROM `uc_roles_products` 
					WHERE `nid`='".$node_id->nid."' AND `rid`='".$query->rid."'";	
			$duration_res=db_query($duration_sql);
			//$duration in days
			$duration=db_fetch_object($duration_res);
			$joindate=date('Y-m-d',$node_id->created);
			//joining date + course durtion
			$date_for_check = strtotime(date("Y-m-d", strtotime($joindate)) . " +".$duration->duration." days");
			//present date
			$date=date('Y-m-d');
			$date=strtotime($date); //exit;
			if($date<=$date_for_check){
				$message = t('Sorry, your "Certificate" course duration was not completed.<br> 
					      So you are not able to purchase "Diploma" course');
				$result[] = array('success' => FALSE,'message' => $message );
				return $result;
			}	  
		}
	}


//code end by chenna



  
  //see if quantity in cart plus quantity to be added are greater than max
  $cart_contents = uc_cart_get_contents();
  $num_in_cart = 0;
  foreach($cart_contents as $cart_item) {
    if ($cart_item->nid == $product_node->nid) {
      $num_in_cart += $cart_item->qty;
    }
  }
  if ($qty + $num_in_cart > $max_qty) {
    //$message = t('Sorry, you can have a maximum of !max_items of type !product_name in your shopping cart.', 
    //              array('!max_items' => format_plural($max_qty, '1 item', '@count items'), '!product_name' => $product_node->title));
    //$message .= ' ' . t('If you\'ve previously added items to your shopping cart please update your <a href="!cart_url">cart</a> and try again.', 
    //              array('!cart_url' => url("cart", NULL, NULL, TRUE)));
   	$message = t('Sorry, this item has already been added to your cart.');
    $result[] = array(
      'success' => FALSE,
      'message' => $message,
    );
    return $result;
  }
}

/**
 * Implementation of hook_cart_item().
 */
function uc_qty_ctrl_cart_item($op, &$item) {
 if ($op == 'load') {
    
	   	$product_node = node_load($item->nid);
	  	$max_qty = variable_get('uc_qty_ctrl_max_' . $product_node->type, 0);
	    
	    // Don't let sneaky users update there cart directly.
		  if ($max_qty > 0 && $item->qty > $max_qty)
		  	$item->qty = $max_qty;
	}
}

/**
 * Implementation of hook_cart_item().
 */
// function uc_restrict_qty_cart_item($op, &$item) {
//   if ($op == 'load') {
//     // If this item has a quantity restriction on it...
//     if ($item->data['restrict_qty'] > 0 && $item->qty > 1) {
//       // Reduce the quantity to 1 if necessary.
//       db_query("UPDATE {uc_cart_products} SET qty = 1, changed = %d WHERE cart_id = '%s' AND nid = %d AND data = '%s'", time(), uc_cart_get_id(), $item->nid, serialize($item->data));
//       $item->qty = 1;
//     }
//   }
// }