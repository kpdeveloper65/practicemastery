<?php

/**
 * @file
 * Module to integrate Ubercart with CiviCRM
 */

/**
 * Implementation of hook_help
 *
 * @param section
 */
function uc_civicrm_help($path = 'admin/help#uc_civicrm') {
  if (!module_exists('civicrm')) {
    return;
  }
  switch ($path) {
    case 'admin/help#uc_civicrm':
      return '<p>' . t('This module integrates !ubercart with !civicrm.'
        . ' When a customer buys something from the Ubercart store,'
        . ' the name and address information they provide is added to'
        . ' the CiviCRM contact database.  If the customer has a simple'
        . ' contact record generated by synching CiviCRM from the Drupal'
        . ' user table, that record is updated with the new information.'
        . ' If no contact record exists, one is created.',
        array('!ubercart' => '<a href="http://www.ubercart.org">Ubercart</a>',
              '!civicrm'  => '<a href="http://civicrm.org">CiviCRM</a>')) . '</p>'
      . '<p>' . t('Then the new or updated contact is added to the'
        . ' \'Purchasers\' group, which is created if necessary.  An'
        . ' activity history record of type \'Purchase\' is added to'
        . ' the contact\'s history, and the \'Purchases\' tab on the'
        . ' contact\'s dashboard entry is populated with a link to'
        . ' the contact\'s order history in Ubercart.') . '</p>'
      . '<p>' . t('The current version of this module is being tested'
        . ' with CiviCRM 3.2.3')
      . '</p>';
  }
} // function uc_civicrm_help()

/**
 * Implementation of CiviCRM hook_civicrm_links
 *
 * Called by CiviCRM CRM_Utils_Hook::links() to retrieve links from
 * Drupal modules and inject them into CiviCRM forms
 *
 * @param $op string
 *   the type of operation being performed
 * @param $object_name string
 *   the name of the object
 * @param $object_id int
 *   the unique identifier for the object
 * @return array|null
 *   an array of arrays, each element is a tuple consisting of id,
 *   url, img, title, weight
 */
function uc_civicrm_civicrm_links($op, $object_name, $object_id) {
  if (!module_exists('civicrm')) {
    return;
  }
  $items = null;
  if ($object_name == 'Contact' && $op == 'view.contact.activity') {
    // $object_name is 'Contact'
    // $object_id is the CiviCRM contact ID
    // Find the Drupal ID for this contact if one exists
    civicrm_initialize();
    require_once 'CRM/Core/Error.php';
    require_once 'CRM/Core/BAO/UFMatch.php';
    require_once 'api/v2/Contact.php';

    // Look for a Drupal UID for this customer's CiviCRM CID
    $uf_id = CRM_Core_BAO_UFMatch::getUFId($object_id);

    if (empty($uf_id)) {

      // No Drupal UID matches this CID. Since every customer
      // either logs in or has an account generated, there must
      // be no purchases to display
      return;
    }

    // Return purchases with link to description
    $items[] = array(
      'id'     => 'purchases',
      'title'  => t('Purchases'),
      'url'    => url("admin/store/civicrm/customer/orders/$uf_id"),
      'weight' => 10
    );
    return $items;
  }
} // function uc_civicrm_civicrm_links()

/**
 * Implementation of Drupal hook_menu
 */
function uc_civicrm_menu() {
  if (!module_exists('civicrm')) {
    return;
  }

  $items = array();

  $items['admin/store/civicrm/customer/orders/%'] = array(
    'title'            => t('CiviCRM'),
    'page callback'    => 'uc_civicrm_contact_transaction',
    'page arguments'   => array(5),
    'access arguments' => array('administer CiviCRM'),
    'type'             => MENU_CALLBACK,
  );

  $items['admin/settings/uc_civicrm_menu'] = array(
    'title' => 'Ubercart CiviCRM Integrator',
    'description' => 'Configuration options for the Ubercart CiviCRM integration module.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uc_civicrm_admin'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
} // function uc_civicrm_menu()

/**
 * Callback to expose order information in a CiviCRM tab
 *
 * @param $uid
 *   Drupal UID for the customer
 */
function uc_civicrm_contact_transaction($uid) {
  if (!module_exists('civicrm') || is_null($uid)) {
    return;
  }

  // load store admin include file from ubercart
  module_load_include('inc', 'uc_store', 'uc_store.admin');

  civicrm_initialize();
  $output = uc_store_customer_orders($uid);
  print $output;
  return;
} // function uc_civicrm_contact_transaction()

/**
 *  Implementation of Ubercart conditional action hook_ca_predicate
 *
 *  Tell Ubercart to let us know when an order is complete
 */
function uc_civicrm_ca_predicate() {
  if (!module_exists('civicrm')) { return; }

  $predicates['uc_civicrm_contact_on_order'] = array(
    '#title'   => t('Copy to CiviCRM upon order submission'),
    '#trigger' => 'uc_checkout_complete',
    '#class'   => 'uc_civicrm',
    '#status'  => 1,
    '#actions' => array(
      array(
        '#name'         => 'uc_civicrm_order_to_civicrm',
        '#title'        => t('Copy order information to CiviCRM'),
        '#argument_map' => array(
          'order'       => 'order',
        ),
      ),
    ),
  );

  $predicates['uc_civicrm_check_order_status'] = array(
    '#title'   => t('Sync CiviCRM status on status update'),
    '#trigger' => 'uc_order_status_update',
    '#class'   => 'uc_civicrm',
    '#status'  => 1,
    '#actions' => array(
      array(
        '#name'         => 'uc_civicrm_sync_status',
        '#title'        => t('Syncronize status'),
        '#argument_map' => array(
          'order'       => 'updated_order',
        ),
      ),
    ),
  );

  return $predicates;
}

/**
 * Implementation of Ubercart conditional action hook_ca_action().
 */
function uc_civicrm_ca_action() {
  if (!module_exists('civicrm')) { return; }

  $order_arg = array(
    '#entity' => 'uc_order',
    '#title'  => t('Order'),
  );

  $actions['uc_civicrm_order_to_civicrm'] = array(
    '#title'     => t('Inform CiviCRM upon order submission'),
    '#category'  => t('Order'),
    '#callback'  => 'uc_civicrm_action_order_to_civicrm',
    '#arguments' => array(
      'order' => $order_arg,
    ),
  );

  $actions['uc_civicrm_sync_status'] = array(
    '#title'     => t('Syncronize order status with CiviCRM when changed'),
    '#category'  => t('Order'),
    '#callback'  => 'uc_civicrm_syncronize_status',
    '#arguments' => array(
      'order' => $order_arg,
    ),
  );

  return $actions;
} // function uc_civicrm_ca_action()

/**
 * Callback to inform CiviCRM on order complete
 *
 * Called when the conditional action trigger 'uc_checkout_complete'
 * is pulled, with the order information.  Merge the information
 * in the order into the CiviCRM contact database.
 *
 * @param $order
 *   Order
 */
function uc_civicrm_action_order_to_civicrm($order) {
  global $user;

  if (!module_exists('civicrm')) {
    return;
  }
  civicrm_initialize();
  require_once 'CRM/Core/BAO/UFMatch.php';
  require_once 'api/v2/Contact.php';

  //  Find or create a CiviCRM contact ID for the customer.
  $cid = _uc_civicrm_get_cid($order);
  if ($cid === false) {
    // an error occured
    watchdog('uc_civicrm', '_uc_civicrm_get_cid( ) returned '
      . $cid, array(), WATCHDOG_ERROR);
    return;
  }

  $cid = _uc_civicrm_add_update_contact($cid, $order);
  if ($cid === false) {
    // an error occured
    watchdog('uc_civicrm', '_uc_civicrm_add_update_contact( ) returned '
      . $cid, array(), WATCHDOG_ERROR);
    return;
  }

  // add an activity 'Purchase' for this contact
  // -> removed because we're adding a contribution
  //$rc = _uc_civicrm_add_activity_purchase($cid, $order->order_id);
  // add a contribution record
  $rc = _uc_civicrm_add_contribution($cid, $order);
  if ($rc === false) {
    // an error occured
    watchdog('uc_civicrm', '_uc_civicrm_add_contribution( ) returned '
      . $cid, array(), WATCHDOG_ERROR);
    return;
  }

  // add this contact to selected groups
  _uc_civicrm_add_to_groups($cid);
} // function uc_civicrm_action_order_to_civicrm()

/**
 * Add this contact to groups
 *
 * @param $contact
 *   CRM_Contact_BAO_Group object describing the contact to add
 */
function _uc_civicrm_add_to_groups($cid) {
  require_once 'api/v2/GroupContact.php';

  $groups = variable_get('uc_civicrm_groups', '');
  // add this contact to the groups, unless one isn't set.
  if ($groups == '') {
    return;
  }
  
  foreach ($groups as $id => $key) {
    if ($key != 0) {
      $params = array('contact_id' => $cid,
        'group_id' => $key);
      $rc = civicrm_group_contact_add($params);

      if (!empty($rc['is_error'])) {
        // add to group failed
        watchdog('uc_civicrm', 'civicrm_group_contact_add( ) returned '
          . $rc['error_message'], array(), WATCHDOG_ERROR);
      }
    }
  }
} // function _uc_civicrm_add_to_purchasers_group()

/**
 * Get CiviCRM contact ID for the customer
 *
 * @param $order
 *   Order
 * @return
 *   false|integer false   => an error occured
 *                 integer => CID if non-zero; must create if zero
 */
function _uc_civicrm_get_cid($order) {
  if (!module_exists('civicrm')) {
    return;
  }
  //FIXME: is there still a legitimate path to here with
  //       no Drupal UID?
  if ($order->uid != 0) {

    // Drupal has a UID for this customer.  Look in the CiviCRM
    // contacts table for a contact that matches the UID or, failing
    // that, matches the primary email.
    $match = CRM_Core_BAO_UFMatch::synchronizeUFMatch($user,
        $order->uid, $order->primary_email, 'Drupal', false,
        'Individual');
    if (!is_object($match)) {
      watchdog('uc_civicrm', 'CRM_Core_BAO_UFMatch::synchronizeUFMatch() failed',
        array(), WATCHDOG_ERROR);
      return false;
    }
    return $match->contact_id;
  }

  // The customer is anonymous.  Look in the CiviCRM contacts table
  // for a contact that matches the primary email.
  $params = array('email'             => $order->primary_email,
                  'return.contact_id' => true);
  $contact = civicrm_contact_search($params);
  if (!empty($contact['is_error'])) {
    watchdog('uc_civicrm', 'civicrm_contact_search() returned '
      . $contact['error_message'], array(), WATCHDOG_ERROR);
    return false;
  }

  // A contact array was returned.  The number of elements in the
  // array describes the matches found
  if (count($contact) == 0) {

    // No matches found, so we will need to create a contact.
    return 0;
  }

  // One or more contact matches found. Return one CID
  $cid = array_shift($contact);
  return $cid;

} // function _uc_civicrm_get_contact()

/**
 *  Add or update contact information
 */
function _uc_civicrm_add_update_contact($cid, $order) {
  require_once 'api/v2/Location.php';

  $contact = array();

  if ($cid != 0) {
    $params = array('contact_id' => $cid,
      'return.contact_id'        => 1,
      'return.contact_source'    => 1,
    );
    $contact = civicrm_contact_search($params);
    if (!empty($contact['is_error'])) {
      watchdog('uc_civicrm', 'civicrm_contact_get() returned '
        . $contact['error_message'], array(), WATCHDOG_ERROR);
      return false;
    }
    $contact = array_shift($contact);
    $contact['contact_id'] = $cid;
    $contact['source']     = $contact['contact_source'];
    unset($contact['contact_source']);
  } // if ($cid != 0)
  // Prepare array to update contact via civi API
  // Assume that if there is a delivery name then that is the contact to add
  if (!empty($order->delivery_last_name)
    && !empty($order->delivery_first_name)) {
    $contact['last_name']    = $order->delivery_last_name;
    $contact['first_name']   = $order->delivery_first_name;
    $contact['sort_name']    = "{$order->delivery_last_name}, {$order->delivery_first_name}";
    $contact['display_name'] = "{$order->delivery_first_name} {$order->delivery_last_name}";
  }
  else {
    $contact['last_name']    = $order->billing_last_name;
    $contact['first_name']   = $order->billing_first_name;
    $contact['sort_name']    = "{$order->billing_last_name}, {$order->billing_first_name}";
    $contact['display_name'] = "{$order->billing_first_name} {$order->billing_last_name}";
  }

  $contact['contact_type'] = 'Individual';
  $contact['email']        = $order->primary_email;
  
  if (empty($contact['source'])) {
    $contact['source'] = 'Ubercart purchase';
  }

  //  Create contact or update existing contact
  $rc = civicrm_contact_add($contact);
  if (!empty($rc['is_error'])) {
    watchdog('uc_civicrm', 'civicrm_contact_add() returned '
      . $rc['error_message'], array(), WATCHDOG_ERROR);
    return false;
  }

  // Begin location array construction per API spec
  // test for delivery location assume that a name
  // means there is one
  if (!empty($order->delivery_last_name)
    && !empty($order->delivery_first_name)) {

    $deliveryPhone = array();
    if (!empty($order->delivery_phone)) {
      $deliveryPhone = array(
        'is_primary' => true,
        'phone' => $order->delivery_phone,
        'phone_type_id' => 1,
        'location_type' => 'Home'
      );
    }

    $countries = uc_get_country_data(array('country_id' => $order->delivery_country));

    $address = array(
      1 => array(
        'location_type_id'       => 1,
        'is_primary'             => true,
        'city'                   => $order->delivery_city,
        'state_province'         => uc_get_zone_code($order->delivery_zone),
        'postal_code'            => $order->delivery_postal_code,
        'street_address'         => $order->delivery_street1,
        'supplemental_address_1' => $order->delivery_street2,
        'country'                => $countries[0]['country_iso_code_2']
      )
    );

    // Put phone in an array and then add to $params array along with address
    $phones = array($deliveryPhone);
    $params = array(
      'version'    => '3.0',
      'contact_id' => $cid,
      'phone'      => $phones,
      'address'    => $address
    );


    $newLocation = civicrm_location_update($params);
    if ($newLocation['is_error']
      && strpos($newLocation['error_message'],
        "Invalid Location Type(s) : Home") !== false) {
      $newLocation = civicrm_location_add($params);
    }

    if (civicrm_error($newLocation)) {
      watchdog('uc_civicrm', 'civicrm_location_update() returned '
        . $newLocation['error_message'], array(), WATCHDOG_ERROR);
      //return false;
    }
  } // end if ( !empty( $order->delivery_last_name )
  // && !empty( $order->delivery_first_name ) )
  // Begin adding billing address
  $billingPhone = array();
  if (!empty($order->billing_phone)) {
    $billingPhone = array(
      'phone' => $order->billing_phone,
      'is_primary' => false,
      'phone_type_id' => 1,
      'location_type' => 'Billing',
    );
  }

  $countries = uc_get_country_data(
    array('country_id' => $order->billing_country));

  $address = array(
    1 => array(
      'location_type'          => 'Billing', // this assumes the billing address type id == 5
      'city'                   => $order->billing_city,
      'state_province'         => uc_get_zone_code($order->billing_zone),
      'postal_code'            => $order->billing_postal_code,
      'street_address'         => $order->billing_street1,
      'supplemental_address_1' => $order->billing_street2,
      'country'                => $countries[0]['country_iso_code_2']
    )
  );

  $phones = array($billingPhone);
  $params = array(
    'version'    => '3.0',
    'contact_id' => $cid,
    'phone'      => $phones,
    'address'    => $address
  );

  $newBillingLocation = civicrm_location_update($params);
  if ($newBillingLocation['is_error']
    && strpos($newBillingLocation['error_message'],
      "Invalid Location Type(s) : Billing") !== false) {
    $newBillingLocation = civicrm_location_add($params);
  }

  if (civicrm_error($newBillingLocation)) {
    watchdog('uc_civicrm', 'civicrm_location_update() returned '
      . $newBillingLocation['error_message'], array(), WATCHDOG_ERROR);
    // we don't want this to return false because we want the processer to continue
    // I've been having issues with this bit.
    //return false;
  }

  return $cid;
} // function _uc_civicrm_add_update_contact()

/**
 * Creates required contribution fields if they have nto already been created
 */
function _uc_civicrm_create_custom_contribution_fields() {
  // Check to see if we've done this before, if so, return
  $groupId = variable_get('uc_civicrm_contribution_group_id', false);
  if ($groupId != false) { return; }

  require_once 'CRM/Core/Config.php';
  require_once 'api/v2/CustomGroup.php';
  // First we need to check if the Sales Tax and Shipping
  // custom fields have been created
  $params = array(
    'title'            => 'Ubercart Purchases',
    'name'             => 'ubercart_purchases',
    'extends'          => array('Contribution'),
    'weight'           => 1,
    'collapse_display' => 0,
    'is_active'        => 1,
  );

  $customGroup = civicrm_custom_group_create($params);
  // Save this for later
  variable_set('uc_civicrm_contribution_group_id', $customGroup['id']);

  // Next add the fields
  $params = array(
    'custom_group_id' => $customGroup['id'],
    'label'           => 'Sales Tax',
    'html_type'       => 'Text',
    'data_type'       => 'String',
    'weight'          => 1,
    'is_required'     => 0,
    'is_searchable'   => 0,
    'is_active'       => 1,
  );

  $taxField = civicrm_custom_field_create($params);
  // Save this for later
  variable_set('uc_civicrm_sales_tax_field_id', $taxField['result']['customFieldId']);

  $params = array(
    'custom_group_id' => $customGroup['id'],
    'label'           => 'Shipping Cost',
    'html_type'       => 'Text',
    'data_type'       => 'String',
    'weight'          => 2,
    'is_required'     => 0,
    'is_searchable'   => 0,
    'is_active'       => 1,
  );

  $shippingField = civicrm_custom_field_create($params);
  // Save this for later
  variable_set('uc_civicrm_shipping_cost_field_id', $shippingField['result']['customFieldId']);
}
// function _uc_civicrm_create_custom_contribution_fields()

/**
 * Add a contribution record
 */
function _uc_civicrm_add_contribution($cid, &$order) {
  // check to see if the fields we need have been created, if not, do it.
  _uc_civicrm_create_custom_contribution_fields( );
  // get the current order's info for transaction id
  $payDataAry = uc_payment_load_payments($order->order_id);
  // this is serialized by ubercart, so we'll undo that
  $payDataAry[0]->data = unserialize($payDataAry[0]->data);
  // if a transaction id exists, we want it, else,
  // fill the field with semi-meaningful hash of the order id
  $txnId = isset($payDataAry[0]->data['txn_id']) ? $payDataAry[0]->data['txn_id'] : 'TRXN ID NOT AVAILABLE ' . md5($order->order_id);

  // @FIXME This is bad, CiviCRM doesn't accept financial values
  // with precision greater than 2 digits after the decimal as
  // far as I can tell.
  // SAP standards dictate this should be 5 digits post-decimal
  $roundedTotal = round($order->order_total * 100) / 100;

  $salesTaxFieldId = 'custom_' . variable_get('uc_civicrm_sales_tax_field_id', '');
  $shippingCostFieldId = 'custom_' . variable_get('uc_civicrm_shipping_cost_field_id', '');
  $taxCost = '';
  $shippingCost = '';

  foreach ($order->line_items as $item) {
    if ($item['type'] == 'tax') {
      $taxCost = $item['amount'];
    }
    elseif ($item['type'] == 'shipping') {
      $shippingCost = $item['amount'];
    }
  }

  $params = array(
    'contact_id' => $cid,
    'receive_date' => date('Ymd'),
    'total_amount' => $roundedTotal,
    'contribution_type_id' => variable_get('uc_civicrm_contribution_type', ''), // @FIXME this needs a sensible default
    'payment_instrument_id' => _uc_civicrm_map_payment_instrument($order->payment_method),
    'non_deductible_amount' => 00.00,
    'fee_amount' => 00.00,
    'net_amount' => $roundedTotal,
    'trxn_id' => $txnId,
    'invoice_id' => $order->order_id . '_uc',
    'source' => _uc_civicrm_create_detail_string($order),
    'contribution_status_id' => _uc_civicrm_map_contribution_status($order->order_status),
    'note' => _uc_civicrm_create_detail_string($order),
    "$salesTaxFieldId" => $taxCost,
    "$shippingCostFieldId" => $shippingCost,
  );

  require_once 'api/v2/Contribute.php';
  $contribution = civicrm_contribution_add($params);

  if (civicrm_error($contribution)) {
    watchdog('uc_civicrm', 'civicrm_contribution_add( ) returned: '
      . $contribution['error_message'], array(), WATCHDOG_ERROR);
    // don't barf on error, just report it
    //return false;
  }

  return true;
} // function _uc_civicrm_add_contribution()

/**
 * Maps an Ubercart payment method to a CiviCRM payment instrument
 *
 * @param string $paymentDevice
 *    An Ubercart payment device
 * @return int
 *    The CiviCRM id of the payment processor
 */
function _uc_civicrm_map_payment_instrument($paymentDevice) {
  // Note that the payment methods for Ubercart are hardcoded in
  // the payment modules under hook_payment_method(), so I'm considering 
  // anything that's not explicitly a check or cash to be a credit card.
  $map = array(
    "credit" => 1,
    "cod"    => 3,
    "check"  => 4,
  );

  if (array_key_exists($paymentDevice, $map)) {
    $id = $map[$paymentDevice];
  }
  else {
    $id = 1; // Another Ubercart payment method - good chance this is credit.
  }

  return $id;
} // function _uc_civicrm_map_payment_instrument()

/**
 * Maps an Ubercart order status to a corresponding CiviCRM contribution status
 *
 * @param string $orderStatus
 *    An Ubercart order status
 * @return int
 *    A CiviCRM order status
 */
function _uc_civicrm_map_contribution_status($orderStatus) {
  // NOTE: There may be a more "correct" way to do this.
  $map = array(
    "completed"        => 1,
    "payment_received" => 1,
    "pending"          => 2,
    "processing"       => 5,
    "canceled"         => 3,
    "in_checkout"      => 5,
  );

  if (array_key_exists($orderStatus, $map)) {
    $id = $map[$orderStatus];
  }
  else {
    $id = 1; // Oh no.
    watchdog('uc_civicrm', 'There is no status that maps to: '
            . $orderStatus . ' Marking as "Complete"', array(), WATCHDOG_WARNING);
  }

  return $id;
} // function _uc_civicrm_map_contribution_status()

/**
 * Syncronizes the status of an order from Ubercart to CiviCRM
 *
 * @param $order
 *    Order
 */
function uc_civicrm_syncronize_status($order) {
  if (!module_exists('civicrm')) { return; }
  civicrm_initialize();
  require_once 'CRM/Core/Config.php';
  $config =& CRM_Core_Config::singleton();

  require_once "api/v2/Contribute.php";

  $searchParams = array(
    'invoice_id'        => $order->order_id . "_uc",
    'return.contact_id' => 1,
  );

  $result =& civicrm_contribution_search($searchParams);

  if (civicrm_error ($result)) {
    watchdog('uc_civicrm', 'uc_civicrm_syncronize_status( ) returned: '
      . $result['error_message'], array(), WATCHDOG_ERROR);
  }
  else {
    $contribution = array_shift($result);

    $setParams = array(
      'id'                     => $contribution['contribution_id'],
      'contact_id'             => $contribution['contact_id'],
      'contribution_status_id' => _uc_civicrm_map_contribution_status($order->order_status),
    );

    $result =& civicrm_contribution_add($setParams);

    // @TODO There is a very odd issue here, evidently the system works,
    // but there are times when this fires before a contribution has been added
    // so I'm commenting this error thrower out for now.
    // It should be examined, though.
    /*
    if (civicrm_error ($result)) {
      watchdog('uc_civicrm', 'uc_civicrm_syncronize_status( ) returned: '
        . $result['error_message'] . ' on line ' . __LINE__, array(), WATCHDOG_ERROR);
    }
    */

  }
} // function uc_civicrm_syncronize_status()

/**
 * Create string to insert for purchase activity details
 */
function _uc_civicrm_create_detail_string($order) {
  $str = '';
  $n = 1;
  foreach ($order->products as $product) {
    if ($n > 1)
      $str .= ', ';
    $str .= $product->title;
    $n++;
  }
  return $str;
} // function _uc_civicrm_create_detail_string()

/**
 *  Admin form configuration for this module
 */
function uc_civicrm_admin() {
  if (!module_exists('civicrm')) { return; }
  if (!civicrm_initialize()) { return; }
  require_once 'api/v2/Group.php';
  require_once 'CRM/Core/Config.php';
  // Get all groups
  $params = array();
  $allGroups = civicrm_group_get($params);
  natsort($allGroups);
  $options = array();
  foreach ($allGroups as $group) {
    $options[$group['id']] = $group['title'];
  }

  // Get contribution types
  $sql = "SELECT id, name FROM civicrm_contribution_type WHERE is_active = 1";
  $dao =& CRM_Core_DAO::executeQuery($sql, array());
  $contTypes = array(0 => "Select a type...");
  while ($dao->fetch()) {
    $contTypes[$dao->id] = $dao->name;
  }

  $form = array();
  $form['uc_civicrm_contribution_type'] = array(
    '#type' => 'select',
    '#title' => t('Contribution type'),
    '#default_value' => variable_get('uc_civicrm_contribution_type', array()),
    '#options' => $contTypes,
    '#description' => t('Select a contribution type for purchases, making a new type with a name like "Ubercart purchase" is recommended.'),
  );

  $form['uc_civicrm_groups'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Groups to add purchasers to'),
    '#default_value' => variable_get('uc_civicrm_groups', array()),
    '#options' => $options,
    '#description' => t('Check to add purchasers to the selected groups')
  );

  return system_settings_form($form);
} // function uc_civicrm_admin()

