<?php
/* *
 *  Unit tests for the uc_civicrm module
 */
class UcCiviCRMTestCase extends DrupalTestCase {

    /**
     *
     */
    function get_info() {
        return array( 'name' => 'Ubercart-CiviCRM',
                'desc' => 'Test integration of Ubercart with CiviCRM.'
                   . '  Requires that the CiviCRM module be enabled',
                'group' => 'Ubercart extras');
    }

    /**
     *  Set up initial conditions for the tests
     */
    public function setup( )
    {
        parent::setUp();
    }

    /**
     *  Clean up after test completion
     */
    public function tearDown( )
    {
        parent::tearDown();
    }

    /**
     *   Test uc_civicrm_menu()
     */
    public function testUcCiviCRMMenu()
    {
        if ( !module_exists( 'civicrm' )  ) {
            $this->fail( "CiviCRM is not installed");
            return;
        }
        $rc = uc_civicrm_menu();
        $this->assertIsA( $rc, 'Array' );
        foreach( $rc as $item ) {
              $this->assertIsA( $item, 'Array' );
        }
    }

    /**
     *  Test uc_civicrm_help()
     */
    public function testUcCiviCRMHelp()
    {
        if ( !module_exists( 'civicrm' )  ) {
            $this->fail( "CiviCRM is not installed");
            return;
        }
        $rc = uc_civicrm_help();
        $this->assertIsA( $rc, 'String' );
        $rc = uc_civicrm_help( 'not-exist/no-way/no-how' );
        $this->assertNull( $rc );
    }

    /**
     *  Test uc_civicrm_civicrm_links()
     */
    public function testUcCiviCRMCiviCRMLinks()
    {
        if ( !module_exists( 'civicrm' )  ) {
            $this->fail( "CiviCRM is not installed");
            return;
        }

        //  Create a Drupal user
        $user = $this->drupalCreateUserRolePerm(  );

        // Get new user's CiviCRM contact ID
        require_once 'CRM/Core/BAO/UFMatch.php';
        $cid = CRM_Core_BAO_UFMatch::getContactId( $user->uid );

        //  Retrieve links for the user's CID
        $rc = uc_civicrm_civicrm_links( 'tabs.contact.activity',
					'Contact', $cid );
        $this->assertIsA( $rc, 'Array' );
        $this->assertIsA( $rc[0], 'Array' );
        $this->assertEqual( $rc[0]['id'], 'purchases' );

        //  Unrecognized first argument returns null
        $rc = uc_civicrm_civicrm_links( 'foo.bar.mumble', 'Contact', $cid );
        $this->assertNull( $rc);

        //  Unmatch contact ID returns null
        $rc = uc_civicrm_civicrm_links( 'tabs.contact.activity', 'Contact', 0 );
        $this->assertNull( $rc );
        
        //  Delete the test user from CiviCRM
        $params = array( 'contact_id' => $cid);
        civicrm_contact_delete( $params );

        //  The Drupal user will be deleted in tearDown()
    }

    /**
     *  Test uc_civicrm_checkout_complete()
     *     and uc_civicrm_contact_transaction()
     */
    public function testUcCiviCRMUcCheckoutComplete()
    {
        if ( !module_exists( 'civicrm' )  ) {
            $this->fail( "CiviCRM is not installed");
            return;
        }

        //  Create a Drupal user
        $user = $this->drupalCreateUserRolePerm(  );

        // Get new user's CiviCRM contact ID
        require_once 'CRM/Core/BAO/UFMatch.php';
        $cid = CRM_Core_BAO_UFMatch::getContactId( $user->uid );
        
        //  Create an order from this user
        $order = uc_order_new( $user->uid, 'payment_received' );
        $order->total = 12.34;
        $delivery_first_name = $this->randomName();
        $order->delivery_first_name = $delivery_first_name;
        $delivery_last_name = $this->randomName();
        $order->delivery_last_name = $delivery_last_name;
        $delivery_phone = $this->randomName();
        $order->delivery_phone = $delivery_phone;
        $order->delivery_company = '';
        $delivery_street1 = $this->randomName();
        $order->delivery_street1 = $delivery_street1;
        $delivery_street2 = $this->randomName();
        $order->delivery_street2 = $delivery_street2;
        $delivery_city = $this->randomName();
        $order->delivery_city = $delivery_city;
        $order->delivery_zone = 58;
        $delivery_postal_code = $this->randomName( 'simpletest_', 1 );
        $order->delivery_postal_code = $delivery_postal_code;
        $order->delivery_country = 840;
        uc_civicrm_uc_checkout_complete( $order, $user );
        $params = array( 'contact_id'        => $cid,
			 'return_contact_type' => true,
			 'return_first_name' => true,
			 'return_last_name' => true,
			 'return_street_address'         => true,
			 'return_supplemental_address_1' => true,
			 'return_city' => true,
			 'return_postal_code' => true,
			 'return_state_province' => true,
			 'return_country' => true,
			 'return_email' => true,
			 'return_phone' => true);
        $contacts = civicrm_contact_get( $params );
	$contact = $contacts[$cid];
        $this->assertIsA( $contact, 'Array' );
        $this->assertEqual( $contact['contact_id'], $cid );
        $this->assertEqual( $contact['contact_type'], 'Individual' );
        $this->assertEqual( $contact['first_name'], $delivery_first_name );
        $this->assertEqual( $contact['last_name'], $delivery_last_name );
        $this->assertEqual( $contact['street_address'], $delivery_street1 );
        $this->assertEqual( $contact['supplemental_address_1'], $delivery_street2 );
        $this->assertEqual( $contact['city'], $delivery_city );
        $this->assertEqual( $contact['postal_code'], $delivery_postal_code );
        $this->assertEqual( $contact['state_province'], 'UT' );
        $this->assertEqual( $contact['country'], 'United States' );
        $this->assertEqual( $contact['email'], strtolower( $order->primary_email ) );
        $this->assertEqual( $contact['phone'], $delivery_phone );

        //  Verify that CID was added to Purchasers
        require_once 'api/v2/GroupContact.php';
        $params = array( 'contact_id' => $cid );
        $rc = civicrm_group_contact_get( $params );
        $this->assertTrue( empty( $rc['is_error'] ) );
        $purchasers_found = false;
        foreach ( (array)$rc as $group ) {
            if ( $group['title'] == 'Purchasers' ) {
                $purchasers_found = true;
            }
        }
        $this->assertTrue( $purchasers_found, 'contact not added to group Purchasers' );
        
        //  Verify that CID has an activity Purchase
        $params = array( 'contact_id' => $cid );
        $rc = civicrm_activities_get_contact( $params );
        $this->assertTrue( empty( $rc['is_error'] ),
            "Error return from civicrm_activities_get_contact($cid)" );
        $purchase_found = false;
        foreach( (array)$rc['result'] as $activity ) {
            if ( $activity['subject'] == 'Purchase' ) {
                $purchase_found = true;
            }
        }
        $this->assertTrue( $purchase_found, 'Purchase activity not recorded for contact' );

        //  Test uc_civicrm_contact_transaction()
        //  verify that there is an order for this contact
        ob_start();
        uc_civicrm_contact_transaction( $user->uid );
        $rc = ob_get_clean();
        $this->assertTrue( preg_match( '/View order/', $rc ) );

        //  Delete the test order from Ubercart
        uc_order_delete( $order->order_id );

        //  Delete the test user from CiviCRM
        $params = array( 'contact_id' => $cid);
        civicrm_contact_delete( $params );

        //  The Drupal user will be deleted in tearDown()
    }
}
?>
